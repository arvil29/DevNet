[{"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\index.js":"1","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\App.js":"2","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\store.js":"3","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\auth.js":"4","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\utils\\setAuthToken.js":"5","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Navbar.js":"6","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Landing.js":"7","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Alert.js":"8","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\auth\\Login.js":"9","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\auth\\Register.js":"10","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Dashboard.js":"11","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\CreateProfile.js":"12","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\EditProfile.js":"13","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\AddExperience.js":"14","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profiles\\Profiles.js":"15","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\AddEducation.js":"16","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\Profile.js":"17","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\Posts.js":"18","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\Post.js":"19","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\routing\\PrivateRoute.js":"20","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\types.js":"21","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\alert.js":"22","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\index.js":"23","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\profile.js":"24","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\DashboardActions.js":"25","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Spinner.js":"26","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Education.js":"27","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Experience.js":"28","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profiles\\ProfileItem.js":"29","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\post.js":"30","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\CommentItem.js":"31","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\CommentForm.js":"32","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\PostForm.js":"33","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\PostItem.js":"34","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileExperience.js":"35","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileGithub.js":"36","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileAbout.js":"37","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileEducation.js":"38","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileTop.js":"39","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\auth.js":"40","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\alert.js":"41","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\post.js":"42","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\profile.js":"43"},{"size":197,"mtime":1608988938958,"results":"44","hashOfConfig":"45"},{"size":2796,"mtime":1610043628047,"results":"46","hashOfConfig":"45"},{"size":389,"mtime":1609281576036,"results":"47","hashOfConfig":"45"},{"size":2475,"mtime":1610420110326,"results":"48","hashOfConfig":"45"},{"size":277,"mtime":1609292811047,"results":"49","hashOfConfig":"45"},{"size":2033,"mtime":1610423043966,"results":"50","hashOfConfig":"45"},{"size":1115,"mtime":1609808923208,"results":"51","hashOfConfig":"45"},{"size":485,"mtime":1609284820302,"results":"52","hashOfConfig":"45"},{"size":2244,"mtime":1610421526025,"results":"53","hashOfConfig":"45"},{"size":3316,"mtime":1610421534238,"results":"54","hashOfConfig":"45"},{"size":2262,"mtime":1610421572542,"results":"55","hashOfConfig":"45"},{"size":7560,"mtime":1610429221761,"results":"56","hashOfConfig":"45"},{"size":8495,"mtime":1610406845032,"results":"57","hashOfConfig":"45"},{"size":3831,"mtime":1610428843162,"results":"58","hashOfConfig":"45"},{"size":1465,"mtime":1610429269799,"results":"59","hashOfConfig":"45"},{"size":3342,"mtime":1610428867396,"results":"60","hashOfConfig":"45"},{"size":3353,"mtime":1610426365520,"results":"61","hashOfConfig":"45"},{"size":1086,"mtime":1610397982599,"results":"62","hashOfConfig":"45"},{"size":1330,"mtime":1610054665054,"results":"63","hashOfConfig":"45"},{"size":867,"mtime":1610429321562,"results":"64","hashOfConfig":"45"},{"size":1020,"mtime":1610048568090,"results":"65","hashOfConfig":"45"},{"size":622,"mtime":1610420112269,"results":"66","hashOfConfig":"45"},{"size":255,"mtime":1609987520142,"results":"67","hashOfConfig":"45"},{"size":7022,"mtime":1610420126582,"results":"68","hashOfConfig":"45"},{"size":640,"mtime":1610066609346,"results":"69","hashOfConfig":"45"},{"size":284,"mtime":1609951180963,"results":"70","hashOfConfig":"45"},{"size":1349,"mtime":1610421750882,"results":"71","hashOfConfig":"45"},{"size":1546,"mtime":1610421737856,"results":"72","hashOfConfig":"45"},{"size":1219,"mtime":1610400662000,"results":"73","hashOfConfig":"45"},{"size":4390,"mtime":1610420135486,"results":"74","hashOfConfig":"45"},{"size":1545,"mtime":1610059327989,"results":"75","hashOfConfig":"45"},{"size":1119,"mtime":1610054513291,"results":"76","hashOfConfig":"45"},{"size":1073,"mtime":1610426031420,"results":"77","hashOfConfig":"45"},{"size":2743,"mtime":1610398347477,"results":"78","hashOfConfig":"45"},{"size":804,"mtime":1610426821557,"results":"79","hashOfConfig":"45"},{"size":1794,"mtime":1610427059133,"results":"80","hashOfConfig":"45"},{"size":857,"mtime":1610426498007,"results":"81","hashOfConfig":"45"},{"size":907,"mtime":1610426771638,"results":"82","hashOfConfig":"45"},{"size":2016,"mtime":1610427220998,"results":"83","hashOfConfig":"45"},{"size":1058,"mtime":1609898473785,"results":"84","hashOfConfig":"45"},{"size":359,"mtime":1609282247165,"results":"85","hashOfConfig":"45"},{"size":1898,"mtime":1610054261749,"results":"86","hashOfConfig":"45"},{"size":1023,"mtime":1609982645685,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"13zjgvx",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"90"},"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\index.js",[],["186","187"],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\App.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\store.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\auth.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Landing.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Alert.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\auth\\Login.js",["188"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { login } from \"../../actions/auth\";\n\nconst Login = ({ login, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const { email, password } = formData;\n\n  //makes sure we can type in text boxes\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  //makes sure we can submit form\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    login(email, password);\n  };\n\n  //If logged in --> redirect to dashboard (can't access login/register pages)\n  if (isAuthenticated) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className=\"large text-primary\">Login</h1>\n      <p className=\"lead\">\n        <i class=\"fas fa-sign-in-alt\"></i> Sign into your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            minLength=\"6\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\" />\n      </form>\n      <p className=\"my-1\">\n        Don't have an account? <Link to=\"/register\">Register</Link>\n      </p>\n    </Fragment>\n  );\n};\n\n//must have these props in Login\nLogin.propTypes = {\n  login: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n};\n\n//connected component needs this part of data from store\n//called any time store state changes\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\n//connect(mapStateToProps, mapDispatchToProps)\nexport default connect(mapStateToProps, { login })(Login);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\auth\\Register.js",["189"],"import React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { setAlert } from \"../../actions/alert\";\nimport { register } from \"../../actions/auth\";\nimport PropTypes from \"prop-types\";\n\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { name, email, password, password2 } = formData;\n\n  //makes sure we can type in text boxes\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  //makes sure we can submit form\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (password !== password2) {\n      setAlert(\"Passwords do not match\", \"danger\"); //calls action which is linked to reducer\n    } else {\n      register({ name, email, password });\n    }\n  };\n\n  //If registered --> redirect to dashboard (can't access login/register pages)\n  if (isAuthenticated) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className=\"large text-primary\">Register</h1>\n      <p className=\"lead\">\n        <i class=\"far fa-plus-square\"></i> New here? Join us!\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            //required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            //required\n          />\n          <small className=\"form-text\">\n            This site uses Gravatar so if you want a profile image, use a\n            Gravatar email\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            minLength=\"6\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already part of the family? <Link to=\"/login\">Login</Link>\n      </p>\n    </Fragment>\n  );\n};\n\n//make sure register takes in these functions as prop type\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool.isRequired,\n};\n\n//connected component needs this part of data from store\n//called any time store state changes\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\n//connect(mapStateToProps, mapDispatchToProps)\nexport default connect(mapStateToProps, { setAlert, register })(Register);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\CreateProfile.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\EditProfile.js",["190"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createProfile, getCurrentProfile } from \"../../actions/profile\";\n\nconst EditProfile = ({\n  profile: { profile, loading },\n  createProfile,\n  getCurrentProfile,\n  history,\n}) => {\n  const [formData, setFormData] = useState({\n    company: \"\",\n    website: \"\",\n    location: \"\",\n    status: \"\",\n    skills: \"\",\n    githubusername: \"\",\n    bio: \"\",\n    twitter: \"\",\n    facebook: \"\",\n    linkedin: \"\",\n    youtube: \"\",\n    instagram: \"\",\n  });\n\n  //for adding social links button\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\n\n  //runs once after initial rendering AND\n  //after every rendering if 'loading' changes\n  useEffect(() => {\n    getCurrentProfile();\n\n    //if loading or attribute not found --> empty space\n    //else --> set to whatever typed in (new or old value)\n    setFormData({\n      company: loading || !profile.company ? \"\" : profile.company,\n      website: loading || !profile.website ? \"\" : profile.website,\n      location: loading || !profile.location ? \"\" : profile.location,\n      status: loading || !profile.status ? \"\" : profile.status,\n      skills: loading || !profile.skills ? \"\" : profile.skills.join(','),\n      githubusername:\n        loading || !profile.githubusername ? \"\" : profile.githubusername,\n      bio: loading || !profile.bio ? \"\" : profile.bio,\n      twitter: loading || !profile.social ? \"\" : profile.social.twitter,\n      facebook: loading || !profile.social ? \"\" : profile.social.facebook,\n      linkedin: loading || !profile.social ? \"\" : profile.social.linkedin,\n      youtube: loading || !profile.social ? \"\" : profile.social.youtube,\n      instagram: loading || !profile.social ? \"\" : profile.social.instagram,\n    });\n  }, [loading, getCurrentProfile]);\n\n  //destructure\n  const {\n    company,\n    website,\n    location,\n    status,\n    skills,\n    githubusername,\n    bio,\n    twitter,\n    facebook,\n    linkedin,\n    youtube,\n    instagram,\n  } = formData;\n\n  //set values for anything typed in\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  //send to createProfile to be created again so updated info can be added\n  const onSubmit = (e) => {\n    e.preventDefault();\n    createProfile(formData, history, true);\n  };\n\n  return (\n    <Fragment>\n      <h1 className=\"large text-primary\">Create Your Profile</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\"></i> Let's get some information to make your\n        profile stand out\n      </p>\n      <small>* = required field</small>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <select name=\"status\" value={status} onChange={(e) => onChange(e)}>\n            <option value=\"0\">* Select Professional Status</option>\n            <option value=\"Developer\">Developer</option>\n            <option value=\"Junior Developer\">Junior Developer</option>\n            <option value=\"Senior Developer\">Senior Developer</option>\n            <option value=\"Manager\">Manager</option>\n            <option value=\"Student\">Student</option>\n            <option value=\"Instructor\">Instructor or Teacher</option>\n            <option value=\"Intern\">Intern</option>\n            <option value=\"Other\">Other</option>\n          </select>\n          <small className=\"form-text\">\n            Give us an idea of where you are at in your career\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Company\"\n            name=\"company\"\n            value={company}\n            onChange={(e) => onChange(e)}\n          />\n          <small className=\"form-text\">\n            Could be your own company or one you work for\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Website\"\n            name=\"website\"\n            value={website}\n            onChange={(e) => onChange(e)}\n          />\n          <small className=\"form-text\">\n            Could be your own or a company website\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Location\"\n            name=\"location\"\n            value={location}\n            onChange={(e) => onChange(e)}\n          />\n          <small className=\"form-text\">\n            City & state suggested (eg. Boston, MA)\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* Skills\"\n            name=\"skills\"\n            value={skills}\n            onChange={(e) => onChange(e)}\n          />\n          <small className=\"form-text\">\n            Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Github Username\"\n            name=\"githubusername\"\n            value={githubusername}\n            onChange={(e) => onChange(e)}\n          />\n          <small className=\"form-text\">\n            If you want your latest repos and a Github link, include your\n            username\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <textarea\n            placeholder=\"A short bio of yourself\"\n            name=\"bio\"\n            value={bio}\n            onChange={(e) => onChange(e)}\n          ></textarea>\n          <small className=\"form-text\">Tell us a little about yourself</small>\n        </div>\n\n        <div className=\"my-2\">\n          <button\n            onClick={() => toggleSocialInputs(!displaySocialInputs)} //set to true/false with every click\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Add Social Network Links\n          </button>\n          <span>Optional</span>\n        </div>\n\n        {displaySocialInputs && ( //if displaySocialInputs is true --> show links\n          <Fragment>\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-twitter fa-2x\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"Twitter URL\"\n                name=\"twitter\"\n                value={twitter}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-facebook fa-2x\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"Facebook URL\"\n                name=\"facebook\"\n                value={facebook}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-youtube fa-2x\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"YouTube URL\"\n                name=\"youtube\"\n                value={youtube}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-linkedin fa-2x\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"Linkedin URL\"\n                name=\"linkedin\"\n                value={linkedin}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-instagram fa-2x\"></i>\n              <input\n                type=\"text\"\n                placeholder=\"Instagram URL\"\n                name=\"instagram\"\n                value={instagram}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n          </Fragment>\n        )}\n\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\n          Go Back\n        </Link>\n      </form>\n    </Fragment>\n  );\n};\n\nEditProfile.propTypes = {\n  createProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  getCurrentProfile: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\n\nexport default connect(mapStateToProps, { createProfile, getCurrentProfile })(\n  withRouter(EditProfile)\n);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\AddExperience.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profiles\\Profiles.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile-forms\\AddEducation.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\Profile.js",["191"],"import React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileTop from \"./ProfileTop\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileExperience from \"./ProfileExperience\";\nimport ProfileEducation from \"./ProfileEducation\";\nimport ProfileGithub from \"./ProfileGithub\";\nimport { getProfileById, getProfiles } from \"../../actions/profile\";\n\nconst Profile = ({\n  getProfileById,\n  profile: { profile, loading },\n  auth,\n  match,\n}) => {\n  useEffect(() => {\n    getProfileById(match.params.id);\n  }, [getProfileById, match.params.id]); //dependency of getProfileById & runs immediately when profile mounts\n\n  return (\n    <Fragment>\n      {profile === null || loading ? ( //if loading --> spinner | else --> profile\n        <Spinner /> \n      ) : (\n        <Fragment>\n\n          {/* Header buttons */}\n          <Link to=\"/profiles\" className=\"btn btn-light\">\n            Back to Profiles\n          </Link>\n\n          {/* if authorized user --> 'Edit Profile' button visible */}\n          {auth.isAuthenticated &&\n            auth.loading === false &&\n            auth.user._id === profile.user._id && (\n              <Link to=\"/edit-profile\" className=\"btn btn-dark\">\n                Edit Profile\n              </Link>\n            )}\n\n          {/* Layout */}\n          <div className=\"profile-grid my-1\">\n            {/* first box */}\n            <ProfileTop profile={profile} />\n\n            {/* second box */}\n            <ProfileAbout profile={profile} /> \n\n            {/* experience box */}\n            <div className=\"profile-exp bg-white p-2\">\n              <h2 className=\"text-primary\">Experience</h2>\n              {profile.experience.length > 0 ? (\n                <Fragment>\n                  {profile.experience.map((experience) => (\n                    <ProfileExperience\n                      key={experience._id}\n                      experience={experience}\n                    />\n                  ))}\n                </Fragment>\n              ) : (\n                <h4>No experience credentials</h4>\n              )}\n            </div>\n\n            {/* education box */}\n            <div className=\"profile-edu bg-white p-2\">\n              <h2 className=\"text-primary\">Education</h2>\n              {profile.education.length > 0 ? (\n                <Fragment>\n                  {profile.education.map((education) => (\n                    <ProfileEducation\n                      key={education._id}\n                      education={education}\n                    />\n                  ))}\n                </Fragment>\n              ) : (\n                <h4>No education credentials</h4>\n              )}\n            </div>\n            \n            {/**github repos */}\n            {profile.githubusername && (\n              <ProfileGithub username={profile.githubusername} />\n            )}\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { getProfileById })(Profile);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\Posts.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\Post.js",["192"],"import React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../layout/Spinner\";\nimport PostItem from \"../posts/PostItem\";\nimport CommentForm from \"../post/CommentForm\";\nimport CommentItem from \"../post/CommentItem\";\nimport { getPost } from \"../../actions/post\";\n\nconst Post = ({ getPost, post: { post, loading }, match }) => {\n  useEffect(() => {\n    getPost(match.params.id);\n  }, [getPost]);\n\n  return loading || post === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      {/* back button */}\n      <Link to=\"/posts\" className=\"btn\">\n        Back to Posts\n      </Link>\n\n      {/* post's image & text */}\n      <PostItem post={post} showActions={false} />\n\n      {/* leave a comment area */}\n      <CommentForm postId={post._id} />\n\n      {/* loop thru our comments */}\n      <div className=\"comments\">\n        {post.comments.map((comment) => (\n          <CommentItem key={comment._id} comment={comment} postId={post._id} />\n        ))}\n      </div>\n    </Fragment>\n  );\n};\n\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, { getPost })(Post);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\types.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\alert.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\index.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\profile.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\DashboardActions.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\layout\\Spinner.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Education.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\dashboard\\Experience.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profiles\\ProfileItem.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\actions\\post.js",["193","194"],"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from \"./types\";\n\n//how actions are working:\n// 1. call backend API that returns res data\n// 2. pass in res data as payload & dispatch (call specific reducer)\n// 3. reducer updates the state w/ new res data passed in\n\n\n//Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"http://localhost:5000/api/posts\");\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Add like\nexport const addLike = (id) => async (dispatch) => {\n  try {\n    const res = await axios.put(`http://localhost:5000/api/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data },\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Remove like\nexport const removeLike = (id) => async (dispatch) => {\n  try {\n    const res = await axios.put(`http://localhost:5000/api/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data }, //put in post's id & likes array into payload\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Delete post\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`http://localhost:5000/api/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: id,\n    });\n\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Add post\nexport const addPost = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `http://localhost:5000/api/posts`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Get post\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`http://localhost:5000/api/posts/${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `http://localhost:5000/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n\n//Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    const res = await axios.delete(\n      `http://localhost:5000/api/posts/comment/${postId}/${commentId}`\n    );\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }, //sets message & status(400/...) to payload\n    });\n  }\n};\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\CommentItem.js",["195","196"],"import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\nimport { deleteComment } from \"../../actions/post\";\nimport auth from \"../../reducers/auth\";\n\nconst CommentItem = ({\n  postId,\n  comment: { _id, text, name, avatar, user, date },\n  auth,\n  deleteComment,\n}) => {\n  return (\n    <div class=\"post bg-white p-1 my-1\">\n      {/* picture & name of user */}\n      <div>\n        <Link to={`/profile/${user}`}>\n          <img class=\"round-img\" src={avatar} alt=\"\" />\n          <h4>{name}</h4>\n        </Link>\n      </div>\n\n      {/* date posted */}\n      <div>\n        <p class=\"my-1\">{text}</p>\n        <p class=\"post-date\">\n          Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\n        </p>\n\n        {/* if authorized user --> give access to delete comment */}\n        {!auth.loading && user === auth.user._id && (\n          <button\n            onClick={(e) => deleteComment(postId, _id)}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            <i className=\"fas fa-times\"></i>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nCommentItem.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comment: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { deleteComment })(CommentItem);\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\post\\CommentForm.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\PostForm.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\posts\\PostItem.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileExperience.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileGithub.js",["197"],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileAbout.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileEducation.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\components\\profile\\ProfileTop.js",[],"C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\auth.js",["198"],"import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  ACCOUNT_DELETED,\n} from \"../actions/types\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  loading: true,\n  user: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case USER_LOADED:\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: action.payload,\n      };\n    case REGISTER_SUCCESS:\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case REGISTER_FAIL:\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT:\n    case ACCOUNT_DELETED:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\alert.js",["199"],"import { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\n\nconst initialState = [];\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_ALERT:\n      return [...state, action.payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== action.payload);\n    default:\n      return state;\n  }\n}\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\post.js",["200"],"import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false,\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: action.payload,\n        loading: false,\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [action.payload, ...state.posts], //update state w new posts from payload\n        loading: false,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload), //update posts w all posts except post we wanna delete\n        loading: false,\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        //check if post's & payload's ID match --> update post w new likes/unlikes\n        //else update w post's original likes/unlikes\n        posts: state.posts.map((post) =>\n          post._id === action.payload.id\n            ? { ...post, likes: action.payload.likes }\n            : post\n        ),\n        loading: false,\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: action.payload },\n        loading: false,\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            (comment) => comment._id !== action.payload\n          ),\n        },\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","C:\\Users\\Arvil Dey\\Desktop\\DevNet\\client\\src\\reducers\\profile.js",["201"],"import {\n  GET_PROFILE,\n  GET_PROFILES,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  UPDATE_PROFILE,\n  GET_REPOS,\n} from \"../actions/types\";\n\nconst initialState = {\n  profile: null,\n  profiles: [],\n  repos: [],\n  loading: true,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_PROFILE:\n    case UPDATE_PROFILE:\n      return {\n        ...state,\n        profile: action.payload, //user info\n        loading: false,\n      };\n    case GET_PROFILES:\n      return {\n        ...state,\n        profiles: action.payload,\n        loading: false,\n      };\n    case PROFILE_ERROR:\n      return {\n        ...state,\n        error: action.payload, //msg & status\n        loading: false,\n      };\n    case CLEAR_PROFILE:\n      return {\n        ...state,\n        profile: null,\n        repos: [],\n        loading: false,\n      };\n    case GET_REPOS:\n      return {\n        ...state,\n        repos: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n",{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":55,"column":13,"nodeType":"208","endLine":55,"endColumn":26},{"ruleId":"206","severity":1,"message":"207","line":76,"column":13,"nodeType":"208","endLine":76,"endColumn":26},{"ruleId":"209","severity":1,"message":"210","line":53,"column":6,"nodeType":"211","endLine":53,"endColumn":34,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":11,"column":26,"nodeType":"215","messageId":"216","endLine":11,"endColumn":37},{"ruleId":"209","severity":1,"message":"217","line":14,"column":6,"nodeType":"211","endLine":14,"endColumn":15,"suggestions":"218"},{"ruleId":"213","severity":1,"message":"219","line":74,"column":11,"nodeType":"215","messageId":"216","endLine":74,"endColumn":14},{"ruleId":"213","severity":1,"message":"219","line":168,"column":11,"nodeType":"215","messageId":"216","endLine":168,"endColumn":14},{"ruleId":"213","severity":1,"message":"220","line":1,"column":17,"nodeType":"215","messageId":"216","endLine":1,"endColumn":25},{"ruleId":"213","severity":1,"message":"221","line":7,"column":8,"nodeType":"215","messageId":"216","endLine":7,"endColumn":12},{"ruleId":"209","severity":1,"message":"222","line":10,"column":6,"nodeType":"211","endLine":10,"endColumn":22,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":19,"column":1,"nodeType":"226","endLine":52,"endColumn":2},{"ruleId":"224","severity":1,"message":"225","line":5,"column":1,"nodeType":"226","endLine":14,"endColumn":2},{"ruleId":"224","severity":1,"message":"225","line":19,"column":1,"nodeType":"226","endLine":83,"endColumn":2},{"ruleId":"224","severity":1,"message":"225","line":18,"column":1,"nodeType":"226","endLine":55,"endColumn":2},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'profile.bio', 'profile.company', 'profile.githubusername', 'profile.location', 'profile.skills', 'profile.social', 'profile.status', and 'profile.website'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'profile.company', you can also switch to useReducer instead of useState and read 'profile.company' in the reducer.","ArrayExpression",["229"],"no-unused-vars","'getProfiles' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["230"],"'res' is assigned a value but never used.","'Fragment' is defined but never used.","'auth' is defined but never used.","React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["231"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [loading, getCurrentProfile, profile.company, profile.website, profile.location, profile.status, profile.skills, profile.githubusername, profile.bio, profile.social]",{"range":"238","text":"239"},"Update the dependencies array to be: [getPost, match.params.id]",{"range":"240","text":"241"},"Update the dependencies array to be: [getGithubRepos, username]",{"range":"242","text":"243"},[1892,1920],"[loading, getCurrentProfile, profile.company, profile.website, profile.location, profile.status, profile.skills, profile.githubusername, profile.bio, profile.social]",[511,520],"[getPost, match.params.id]",[335,351],"[getGithubRepos, username]"]